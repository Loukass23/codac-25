// =============================================================================
// PRISMA SCHEMA - CODAC LEARNING MANAGEMENT SYSTEM
// =============================================================================

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// =============================================================================
// ENUMS
// =============================================================================

enum UserRole {
  STUDENT
  ALUMNI
  MENTOR
  ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  GRADUATED
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  COMPLETED
  PAUSED
  ARCHIVED
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum ExperienceType {
  WORK
  EDUCATION
  VOLUNTEER
  PROJECT
  INTERNSHIP
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
  FREELANCE
}

enum JobLevel {
  ENTRY
  JUNIOR
  MID
  SENIOR
  LEAD
  EXECUTIVE
}

enum JobApplicationStatus {
  PENDING
  REVIEWED
  INTERVIEW
  REJECTED
  ACCEPTED
}

enum AttendanceStatus {
  PRESENT
  ABSENT_SICK
  ABSENT_EXCUSED
  ABSENT_UNEXCUSED
}

enum ConversationType {
  DIRECT
  GROUP
  CHANNEL
}

enum ParticipantRole {
  OWNER
  ADMIN
  MEMBER
}

enum NotificationType {
  DIRECT_MESSAGE
  GROUP_MESSAGE
  CHANNEL_MESSAGE
  MENTION
  CONVERSATION_INVITE
  SYSTEM
}

// =============================================================================
// AUTHENTICATION & USER MANAGEMENT
// =============================================================================

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model User {
  id             String     @id @default(cuid())
  name           String?
  username       String     @unique
  email          String?    @unique
  emailVerified  DateTime?
  image          String?
  password       String? // For credentials authentication
  bio            String? // User bio
  avatar         String? // User avatar URL or base64 data
  role           UserRole   @default(STUDENT)
  status         UserStatus @default(ACTIVE)
  cohortId       String?
  cohort         Cohort?    @relation(fields: [cohortId], references: [id])
  startDate      DateTime? // Course start date (for STUDENT users)
  endDate        DateTime? // Course end date (replaces graduationDate for STUDENT users)
  linkedinUrl    String?
  githubUrl      String?
  portfolioUrl   String?
  currentJob     String?
  currentCompany String?
  location       String?
  expertise      Json? // Array of expertise areas
  yearsExp       Int? // Years of professional experience

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // NextAuth Relations
  accounts Account[]
  sessions Session[]

  // User Management Relations
  quizResults       QuizResult[]
  attendanceRecords Attendance[]

  // Community Relations
  documentDiscussions DocumentDiscussion[]
  documentComments    DocumentComment[]

  // Job Relations
  postedJobs      Job[]            @relation("PostedJobs")
  jobApplications JobApplication[] @relation("JobApplications")

  // Project Relations
  projectProfile        ProjectProfile?
  projectComments       ProjectComment[]
  projectLikes          ProjectLike[]
  projectCollaborations ProjectCollaborator[]

  // Chat Relations
  chatMessages  ChatMessage[]             @relation("UserChatMessages")
  conversations ConversationParticipant[] @relation("UserConversations")

  // Notification Relations
  notifications           Notification[]
  notificationPreferences NotificationPreference?

  // Document Relations
  documents       Document[]
  documentFolders DocumentFolder[]

  @@index([email])
  @@index([role])
  @@index([status])
  @@index([cohortId])
  @@map("users")
}

model Cohort {
  id          String    @id @default(cuid())
  name        String
  startDate   DateTime
  endDate     DateTime? // Course end date (optional for migration)
  description String?
  image       String?
  avatar      String? // Cohort avatar URL or base64 data
  slug        String    @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  students          User[]
  attendanceRecords Attendance[]

  @@index([slug])
  @@map("cohorts")
}

// =============================================================================
// DOCUMENT MANAGEMENT
// =============================================================================

model DocumentFolder {
  id          String  @id @default(cuid())
  name        String
  description String?
  color       String  @default("#3B82F6") // Hex color for folder
  icon        String? // Icon name (e.g., "folder", "folder-open", etc.)

  // Hierarchy
  parentId String?
  parent   DocumentFolder?  @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children DocumentFolder[] @relation("FolderHierarchy")

  // Ownership
  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  // Documents in this folder
  documents Document[]

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Ordering within parent folder
  sortOrder Int @default(0)

  @@index([ownerId])
  @@index([parentId])
  @@index([ownerId, parentId])
  @@map("document_folders")
}

model Document {
  id          String  @id @default(cuid())
  content     Json    @default("[]") // Plate.js Value content
  title       String?
  description String?

  // Document metadata
  version     Int     @default(1) // For versioning support
  isPublished Boolean @default(false)
  isArchived  Boolean @default(false)

  // Document type and context
  documentType String // 'project_summary', 'community_post', 'lesson_content', 'lms_content', etc.

  // LMS-specific fields
  navTitle        String? // Navigation title for LMS
  metaTitle       String? // SEO meta title
  metaDescription String? // SEO meta description
  access          String? // Access control: 'public', 'all', 'web', 'data', 'admin'
  order           Int? // Display order for LMS content
  prev            String? // Previous content slug
  next            String? // Next content slug
  slug            String? // URL slug for LMS content

  // Relations
  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  // Folder organization
  folderId String?
  folder   DocumentFolder? @relation(fields: [folderId], references: [id], onDelete: SetNull)

  // Polymorphic relations - can be linked to various entities
  projectId String? // If this document belongs to a project

  // Document discussions
  documentDiscussions DocumentDiscussion[]

  // Project relation
  project Project?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([authorId])
  @@index([documentType])
  @@index([isPublished])
  @@index([projectId])
  @@index([folderId])
  @@index([slug])
  @@index([access])
  @@index([order])
  @@map("documents")
}

model DocumentDiscussion {
  id              String   @id @default(cuid())
  isResolved      Boolean  @default(false)
  documentContent String? // The text content that was discussed
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  documentId String
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Comments in this discussion
  comments DocumentComment[]

  @@index([documentId])
  @@index([userId])
  @@map("document_discussions")
}

model DocumentComment {
  id          String   @id @default(cuid())
  contentRich Json // Plate.js rich content (Value type) - matches TComment.contentRich
  isEdited    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  discussionId String
  discussion   DocumentDiscussion @relation(fields: [discussionId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  parentId String?
  parent   DocumentComment?  @relation("DocumentCommentThread", fields: [parentId], references: [id])
  replies  DocumentComment[] @relation("DocumentCommentThread")

  @@index([discussionId])
  @@index([userId])
  @@index([parentId])
  @@map("document_comments")
}

// =============================================================================
// PROJECT PORTFOLIO SYSTEM
// =============================================================================

model ProjectProfile {
  id        String  @id @default(cuid())
  bio       String?
  headline  String? // Professional headline/tagline
  location  String?
  website   String?
  resume    String? // URL to resume/CV
  theme     String  @default("default") // Project profile theme/template
  isPublic  Boolean @default(true)
  isActive  Boolean @default(true)
  viewCount Int     @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId      String         @unique
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  projects    Project[]
  skills      ProjectSkill[]
  experiences Experience[]

  @@index([userId])
  @@index([isPublic])
  @@index([isActive])
  @@map("project_profiles")
}

model Project {
  id          String        @id @default(cuid())
  title       String
  slug        String        @unique // URL-friendly slug for routing
  description String
  shortDesc   String? // Brief description for cards
  images      Json? // Array of image URLs
  demoUrl     String? // Live demo URL
  githubUrl   String? // Repository URL
  techStack   Json // Array of technologies used
  features    Json? // Array of key features
  challenges  String? // Challenges faced during development
  solutions   String? // Solutions implemented
  status      ProjectStatus @default(COMPLETED)
  startDate   DateTime?
  endDate     DateTime?
  isFeatured  Boolean       @default(false)
  isPublic    Boolean       @default(true)
  likes       Int           @default(0)
  views       Int           @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  projectProfileId String
  projectProfile   ProjectProfile @relation(fields: [projectProfileId], references: [id], onDelete: Cascade)

  // Document relation for rich content (Plate.js editor content)
  documentId String?   @unique
  document   Document? @relation(fields: [documentId], references: [id], onDelete: SetNull)

  comments      ProjectComment[]
  projectLikes  ProjectLike[]
  collaborators ProjectCollaborator[]

  @@index([projectProfileId])
  @@index([status])
  @@index([isFeatured])
  @@index([isPublic])
  @@index([documentId])
  @@index([slug])
  @@map("projects")
}

model ProjectComment {
  id      String @id @default(cuid())
  content String

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  parentId String?
  parent   ProjectComment?  @relation("ProjectCommentThread", fields: [parentId], references: [id])
  replies  ProjectComment[] @relation("ProjectCommentThread")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([authorId])
  @@index([projectId])
  @@index([parentId])
  @@map("project_comments")
}

model ProjectLike {
  id String @id @default(cuid())

  userId    String
  projectId String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, projectId])
  @@index([userId])
  @@index([projectId])
  @@map("project_likes")
}

model ProjectCollaborator {
  id   String @id @default(cuid())
  role String @default("Contributor") // Role in the project

  userId    String
  projectId String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, projectId])
  @@index([userId])
  @@index([projectId])
  @@map("project_collaborators")
}

model Skill {
  id       String  @id @default(cuid())
  name     String  @unique
  category String // e.g., "Frontend", "Backend", "Database", "DevOps"
  icon     String? // Icon name or URL
  color    String  @default("#3B82F6") // Display color

  createdAt DateTime @default(now())

  // Relations
  projectSkills ProjectSkill[]

  @@index([category])
  @@map("skills")
}

model ProjectSkill {
  id          String     @id @default(cuid())
  proficiency SkillLevel @default(INTERMEDIATE)
  yearsExp    Int? // Years of experience
  isHighlight Boolean    @default(false) // Featured skill

  projectProfileId String
  skillId          String
  projectProfile   ProjectProfile @relation(fields: [projectProfileId], references: [id], onDelete: Cascade)
  skill            Skill          @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@unique([projectProfileId, skillId])
  @@index([projectProfileId])
  @@index([skillId])
  @@map("project_skills")
}

model Experience {
  id          String         @id @default(cuid())
  type        ExperienceType
  title       String // Job title or degree
  company     String // Company name or institution
  location    String?
  description String?
  startDate   DateTime
  endDate     DateTime?
  isCurrent   Boolean        @default(false)

  projectProfileId String
  projectProfile   ProjectProfile @relation(fields: [projectProfileId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectProfileId])
  @@index([type])
  @@map("experiences")
}

// =============================================================================
// JOB BOARD
// =============================================================================

model Job {
  id          String    @id @default(cuid())
  title       String
  description String
  company     String
  location    String?
  type        JobType   @default(FULL_TIME)
  level       JobLevel  @default(ENTRY)
  salary      String?
  remote      Boolean   @default(false)
  skills      Json? // Array of required skills
  benefits    Json? // Array of benefits
  applyUrl    String?
  applyEmail  String?
  isActive    Boolean   @default(true)
  featured    Boolean   @default(false)
  expiresAt   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  postedById   String?
  postedBy     User?            @relation("PostedJobs", fields: [postedById], references: [id], onDelete: SetNull)
  applications JobApplication[]

  @@index([postedById])
  @@index([type])
  @@index([level])
  @@index([isActive])
  @@index([featured])
  @@index([expiresAt])
  @@map("jobs")
}

model JobApplication {
  id          String               @id @default(cuid())
  coverLetter String?
  resume      String? // URL or file path
  status      JobApplicationStatus @default(PENDING)
  appliedAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt

  // Relations
  jobId  String
  userId String
  job    Job    @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user   User   @relation("JobApplications", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([jobId, userId])
  @@index([jobId])
  @@index([userId])
  @@index([status])
  @@map("job_applications")
}

// =============================================================================
// QUIZ SYSTEM
// =============================================================================

model Quiz {
  id         String     @id @default(cuid())
  topic      String
  difficulty String
  quizTitle  String
  questions  Question[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  quizResults QuizResult[]

  @@index([topic])
  @@index([difficulty])
  @@map("quizzes")
}

model Question {
  id            String   @id @default(cuid())
  text          String
  options       String // Stored as a JSON string
  correctAnswer String
  explanation   String?
  quizId        String
  quiz          Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())

  @@index([quizId])
  @@map("questions")
}

model QuizResult {
  id        String   @id @default(cuid())
  userId    String
  quizId    String
  score     Int
  total     Int
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([quizId])
  @@map("quiz_results")
}

// =============================================================================
// ATTENDANCE SYSTEM
// =============================================================================

model Attendance {
  id     String           @id @default(cuid())
  date   DateTime         @db.Date
  status AttendanceStatus

  // Relations
  studentId String
  student   User   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  cohortId  String
  cohort    Cohort @relation(fields: [cohortId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([studentId, date]) // One attendance record per student per day
  @@index([studentId])
  @@index([cohortId])
  @@index([date])
  @@index([status])
  @@map("attendance")
}

// =============================================================================
// CHAT SYSTEM
// =============================================================================

model ChatMessage {
  id             String   @id @default(cuid())
  content        String
  userName       String?
  userId         String
  conversationId String
  roomName       String? // For backward compatibility
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  user         User         @relation("UserChatMessages", fields: [userId], references: [id], onDelete: Cascade)
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([conversationId])
  @@index([createdAt])
  @@map("chat_messages")
}

model Conversation {
  id          String           @id @default(cuid())
  name        String?
  description String?
  type        ConversationType @default(DIRECT)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Relations
  participants ConversationParticipant[]
  messages     ChatMessage[]

  @@index([type])
  @@map("conversations")
}

model ConversationParticipant {
  id             String          @id @default(cuid())
  conversationId String
  userId         String
  role           ParticipantRole @default(MEMBER)
  joinedAt       DateTime        @default(now())
  lastSeenAt     DateTime?

  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user         User         @relation("UserConversations", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
  @@index([conversationId])
  @@index([userId])
  @@map("conversation_participants")
}

// =============================================================================
// NOTIFICATION SYSTEM
// =============================================================================

model Notification {
  id       String           @id @default(cuid())
  type     NotificationType
  title    String
  message  String
  isRead   Boolean          @default(false)
  metadata Json? // Store additional context like messageId, conversationId, etc.

  // Recipient
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Optional: Link to specific entities
  messageId      String?
  conversationId String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  readAt    DateTime?

  @@index([userId, isRead])
  @@index([userId, createdAt])
  @@index([type])
  @@map("notifications")
}

model NotificationPreference {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Notification channels
  inApp Boolean @default(true)
  email Boolean @default(true)
  push  Boolean @default(false)

  // Notification types
  directMessages  Boolean @default(true)
  groupMessages   Boolean @default(true)
  channelMessages Boolean @default(true)
  mentions        Boolean @default(true)

  // Timing preferences
  quietHoursStart String? // Format: "22:00"
  quietHoursEnd   String? // Format: "08:00"
  timezone        String? // User's timezone

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId])
  @@map("notification_preferences")
}
