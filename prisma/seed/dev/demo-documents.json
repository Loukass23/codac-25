[
  {
    "title": "Getting Started with React Hooks",
    "description": "A comprehensive guide to understanding and using React Hooks effectively",
    "documentType": "lesson_content",
    "authorEmail": "eren.yeager@codac.academy",
    "isPublished": true,
    "content": [
      {
        "type": "h1",
        "children": [
          {
            "text": "Getting Started with React Hooks"
          }
        ]
      },
      {
        "type": "p",
        "children": [
          {
            "text": "React Hooks revolutionized how we write React components by allowing us to use state and other React features in functional components. In this guide, we'll explore the most commonly used hooks and how to implement them effectively."
          }
        ]
      },
      {
        "type": "h2",
        "children": [
          {
            "text": "What are React Hooks?"
          }
        ]
      },
      {
        "type": "p",
        "children": [
          {
            "text": "Hooks are functions that let you \"hook into\" React state and lifecycle features from function components. They were introduced in React 16.8 and allow you to use state without writing a class."
          }
        ]
      },
      {
        "type": "h2",
        "children": [
          {
            "text": "Common Hooks"
          }
        ]
      },
      {
        "type": "h3",
        "children": [
          {
            "text": "useState"
          }
        ]
      },
      {
        "type": "p",
        "children": [
          {
            "text": "The useState hook allows you to add state to functional components:"
          }
        ]
      },
      {
        "type": "code_block",
        "language": "javascript",
        "children": [
          {
            "type": "code_line",
            "children": [
              {
                "text": "import React, { useState } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}"
              }
            ]
          }
        ]
      },
      {
        "type": "h3",
        "children": [
          {
            "text": "useEffect"
          }
        ]
      },
      {
        "type": "p",
        "children": [
          {
            "text": "The useEffect hook lets you perform side effects in functional components:"
          }
        ]
      },
      {
        "type": "code_block",
        "language": "javascript",
        "children": [
          {
            "type": "code_line",
            "children": [
              {
                "text": "import React, { useState, useEffect } from 'react';\n\nfunction Example() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    document.title = `You clicked ${count} times`;\n  });\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}"
              }
            ]
          }
        ]
      },
      {
        "type": "h2",
        "children": [
          {
            "text": "Best Practices"
          }
        ]
      },
      {
        "type": "ul",
        "children": [
          {
            "type": "li",
            "children": [
              {
                "text": "Only call hooks at the top level of your React function"
              }
            ]
          },
          {
            "type": "li",
            "children": [
              {
                "text": "Don't call hooks inside loops, conditions, or nested functions"
              }
            ]
          },
          {
            "type": "li",
            "children": [
              {
                "text": "Always use the dependency array in useEffect to avoid infinite loops"
              }
            ]
          }
        ]
      }
    ],
    "discussions": [
      {
        "id": "discussion-1",
        "isResolved": false,
        "documentContent": "React Hooks revolutionized how we write React components",
        "authorEmail": "mikasa.ackerman@codac.academy",
        "comments": [
          {
            "contentRich": [
              {
                "type": "p",
                "children": [
                  {
                    "text": "Great explanation! The examples really help clarify how hooks work. I especially appreciate the best practices section."
                  }
                ]
              }
            ],
            "isEdited": false
          },
          {
            "contentRich": [
              {
                "type": "p",
                "children": [
                  {
                    "text": "Great explanation! The examples really help clarify how hooks work. I especially appreciate the best practices section."
                  }
                ]
              }
            ],
            "isEdited": false
          },
          {
            "contentRich": [
              {
                "type": "p",
                "children": [
                  {
                    "text": "Great explanation! The examples really help clarify how hooks work. I especially appreciate the best practices section."
                  }
                ]
              }
            ],
            "isEdited": false
          }
        ]
      },
      {
        "id": "discussion-2",
        "isResolved": true,
        "documentContent": "What are React Hooks?",
        "authorEmail": "armin.arlert@codac.academy",
        "comments": [
          {
            "contentRich": [
              {
                "type": "p",
                "children": [
                  {
                    "text": "Could you add more examples of custom hooks? I'd love to see how to create reusable logic with hooks."
                  }
                ]
              }
            ],
            "userId": "armin.arlert@codac.academy",
            "isEdited": false
          },
          {
            "contentRich": [
              {
                "type": "p",
                "children": [
                  {
                    "text": "Absolutely! I'll add a section on custom hooks in the next update. Custom hooks are a powerful way to share stateful logic between components."
                  }
                ]
              }
            ],
            "userId": "eren.yeager@codac.academy",
            "parentId": null,
            "isEdited": false
          }
        ]
      }
    ]
  },
  {
    "title": "TypeScript Best Practices for React Development",
    "description": "Essential TypeScript patterns and practices for building robust React applications",
    "documentType": "lesson_content",
    "authorEmail": "levi.ackerman@codac.academy",
    "isPublished": true,
    "content": [
      {
        "type": "h1",
        "children": [
          {
            "text": "TypeScript Best Practices for React Development"
          }
        ]
      },
      {
        "type": "p",
        "children": [
          {
            "text": "TypeScript brings static type checking to JavaScript, making your React applications more maintainable and less error-prone. Here are the essential patterns and practices every React developer should know."
          }
        ]
      },
      {
        "type": "h2",
        "children": [
          {
            "text": "Component Props Typing"
          }
        ]
      },
      {
        "type": "p",
        "children": [
          {
            "text": "Always define proper interfaces for your component props:"
          }
        ]
      },
      {
        "type": "code_block",
        "language": "typescript",
        "children": [
          {
            "type": "code_line",
            "children": [
              {
                "text": "interface ButtonProps {\n  label: string;\n  onClick: () => void;\n  disabled?: boolean;\n  variant?: 'primary' | 'secondary';\n}\n\nconst Button: React.FC<ButtonProps> = ({ \n  label, \n  onClick, \n  disabled = false, \n  variant = 'primary' \n}) => {\n  return (\n    <button \n      className={`btn btn-${variant}`}\n      onClick={onClick}\n      disabled={disabled}\n    >\n      {label}\n    </button>\n  );\n};"
              }
            ]
          }
        ]
      },
      {
        "type": "h2",
        "children": [
          {
            "text": "State Management with TypeScript"
          }
        ]
      },
      {
        "type": "p",
        "children": [
          {
            "text": "Use generic types for useState to ensure type safety:"
          }
        ]
      },
      {
        "type": "code_block",
        "language": "typescript",
        "children": [
          {
            "type": "code_line",
            "children": [
              {
                "text": "interface User {\n  id: string;\n  name: string;\n  email: string;\n  avatar?: string;\n}\n\nconst UserProfile: React.FC = () => {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchUser = async (id: string): Promise<void> => {\n    setLoading(true);\n    try {\n      const response = await fetch(`/api/users/${id}`);\n      const userData: User = await response.json();\n      setUser(userData);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Unknown error');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Component JSX...\n};"
              }
            ]
          }
        ]
      },
      {
        "type": "h2",
        "children": [
          {
            "text": "Event Handler Typing"
          }
        ]
      },
      {
        "type": "p",
        "children": [
          {
            "text": "Properly type your event handlers to avoid runtime errors:"
          }
        ]
      },
      {
        "type": "code_block",
        "language": "typescript",
        "children": [
          {
            "type": "code_line",
            "children": [
              {
                "text": "const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n  setValue(event.target.value);\n};\n\nconst handleFormSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n  event.preventDefault();\n  // Handle form submission\n};\n\nconst handleButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n  event.stopPropagation();\n  // Handle button click\n};"
              }
            ]
          }
        ]
      }
    ],
    "discussions": [
      {
        "id": "discussion-3",
        "isResolved": false,
        "documentContent": "Component Props Typing",
        "authorEmail": "historia.reiss@codac.academy",
        "comments": [
          {
            "contentRich": [
              {
                "type": "p",
                "children": [
                  {
                    "text": "This is excellent! The examples are very practical. I've been struggling with TypeScript event handlers, and this clarifies everything."
                  }
                ]
              }
            ],
            "userId": "historia.reiss@codac.academy",
            "isEdited": false
          }
        ]
      },
      {
        "id": "discussion-4",
        "isResolved": false,
        "documentContent": "State Management with TypeScript",
        "authorEmail": "jean.kirstein@codac.academy",
        "comments": [
          {
            "contentRich": [
              {
                "type": "p",
                "children": [
                  {
                    "text": "Could you add more examples of generic components? I'd like to see how to create reusable components with TypeScript generics."
                  }
                ]
              }
            ],
            "userId": "jean.kirstein@codac.academy",
            "isEdited": false
          }
        ]
      }
    ]
  },
  {
    "title": "Building Scalable React Applications",
    "description": "Architecture patterns and best practices for building large-scale React applications",
    "documentType": "lesson_content",
    "authorEmail": "erwin.smith@codac.academy",
    "isPublished": true,
    "content": [
      {
        "type": "h1",
        "children": [
          {
            "text": "Building Scalable React Applications"
          }
        ]
      },
      {
        "type": "p",
        "children": [
          {
            "text": "As React applications grow in complexity, maintaining a scalable architecture becomes crucial. This guide covers essential patterns and practices for building applications that can grow with your team and requirements."
          }
        ]
      },
      {
        "type": "h2",
        "children": [
          {
            "text": "Folder Structure"
          }
        ]
      },
      {
        "type": "p",
        "children": [
          {
            "text": "Organize your codebase with a clear, scalable folder structure:"
          }
        ]
      },
      {
        "type": "code_block",
        "language": "text",
        "children": [
          {
            "type": "code_line",
            "children": [
              {
                "text": "src/\n├── components/          # Reusable UI components\n│   ├── ui/              # Basic UI elements\n│   └── features/        # Feature-specific components\n├── pages/               # Page components\n├── hooks/               # Custom React hooks\n├── services/            # API and external services\n├── store/               # State management\n├── utils/               # Utility functions\n├── types/               # TypeScript type definitions\n└── constants/           # Application constants"
              }
            ]
          }
        ]
      },
      {
        "type": "h2",
        "children": [
          {
            "text": "Component Design Principles"
          }
        ]
      },
      {
        "type": "h3",
        "children": [
          {
            "text": "Single Responsibility Principle"
          }
        ]
      },
      {
        "type": "p",
        "children": [
          {
            "text": "Each component should have a single, well-defined responsibility. Break down complex components into smaller, focused pieces."
          }
        ]
      },
      {
        "type": "h3",
        "children": [
          {
            "text": "Composition over Inheritance"
          }
        ]
      },
      {
        "type": "p",
        "children": [
          {
            "text": "Use composition to build complex UIs from simple components rather than creating deep inheritance hierarchies."
          }
        ]
      },
      {
        "type": "code_block",
        "language": "typescript",
        "children": [
          {
            "type": "code_line",
            "children": [
              {
                "text": "// Good: Composition\nconst UserCard = ({ user }: { user: User }) => (\n  <Card>\n    <CardHeader>\n      <Avatar src={user.avatar} />\n      <CardTitle>{user.name}</CardTitle>\n    </CardHeader>\n    <CardContent>\n      <UserStats stats={user.stats} />\n    </CardContent>\n  </Card>\n);\n\n// Avoid: Deep inheritance\nclass UserCard extends BaseCard extends GenericCard extends Component { ... }"
              }
            ]
          }
        ]
      },
      {
        "type": "h2",
        "children": [
          {
            "text": "State Management Strategies"
          }
        ]
      },
      {
        "type": "p",
        "children": [
          {
            "text": "Choose the right state management solution based on your application's needs:"
          }
        ]
      },
      {
        "type": "ul",
        "children": [
          {
            "type": "li",
            "children": [
              {
                "text": "Local state (useState, useReducer) for component-specific data"
              }
            ]
          },
          {
            "type": "li",
            "children": [
              {
                "text": "Context API for shared data within component trees"
              }
            ]
          },
          {
            "type": "li",
            "children": [
              {
                "text": "Redux Toolkit for complex global state management"
              }
            ]
          },
          {
            "type": "li",
            "children": [
              {
                "text": "React Query for server state management"
              }
            ]
          }
        ]
      }
    ],
    "discussions": [
      {
        "id": "discussion-5",
        "isResolved": false,
        "documentContent": "Folder Structure",
        "authorEmail": "hange.zoe@codac.academy",
        "comments": [
          {
            "contentRich": [
              {
                "type": "p",
                "children": [
                  {
                    "text": "This is a comprehensive guide! The folder structure example is exactly what I needed for my current project."
                  }
                ]
              }
            ],
            "authorEmail": "hange.zoe@codac.academy",
            "isEdited": false
          }
        ]
      },
      {
        "id": "discussion-6",
        "isResolved": false,
        "documentContent": "Component Design Principles",
        "authorEmail": "sasha.blouse@codac.academy",
        "comments": [
          {
            "contentRich": [
              {
                "type": "p",
                "children": [
                  {
                    "text": "Great content! Could you add more details about testing strategies for scalable applications?"
                  }
                ]
              }
            ],
            "authorEmail": "sasha.blouse@codac.academy",
            "isEdited": false
          }
        ]
      }
    ]
  },
  {
    "title": "Modern CSS Techniques for React Developers",
    "description": "Advanced CSS techniques and modern styling approaches for React applications",
    "documentType": "lesson_content",
    "authorEmail": "mikasa.ackerman@codac.academy",
    "isPublished": true,
    "content": [
      {
        "type": "h1",
        "children": [
          {
            "text": "Modern CSS Techniques for React Developers"
          }
        ]
      },
      {
        "type": "p",
        "children": [
          {
            "text": "Modern web development requires a deep understanding of CSS techniques that work well with React. This guide covers the most effective approaches for styling React applications."
          }
        ]
      },
      {
        "type": "h2",
        "children": [
          {
            "text": "CSS-in-JS vs Traditional CSS"
          }
        ]
      },
      {
        "type": "p",
        "children": [
          {
            "text": "Both approaches have their place in modern React development. Choose based on your team's preferences and project requirements."
          }
        ]
      },
      {
        "type": "h3",
        "children": [
          {
            "text": "Styled Components"
          }
        ]
      },
      {
        "type": "code_block",
        "language": "typescript",
        "children": [
          {
            "type": "code_line",
            "children": [
              {
                "text": "import styled from 'styled-components';\n\nconst Button = styled.button<{ variant: 'primary' | 'secondary' }>`\n  background: ${props => props.variant === 'primary' ? '#007bff' : '#6c757d'};\n  color: white;\n  border: none;\n  padding: 12px 24px;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: background-color 0.2s;\n\n  &:hover {\n    opacity: 0.9;\n  }\n\n  &:disabled {\n    opacity: 0.6;\n    cursor: not-allowed;\n  }\n`;\n\n// Usage\n<Button variant=\"primary\" onClick={handleClick}>\n  Click me\n</Button>"
              }
            ]
          }
        ]
      },
      {
        "type": "h3",
        "children": [
          {
            "text": "CSS Modules"
          }
        ]
      },
      {
        "type": "code_block",
        "language": "typescript",
        "children": [
          {
            "type": "code_line",
            "children": [
              {
                "text": "// Button.module.css\n.button {\n  background: #007bff;\n  color: white;\n  border: none;\n  padding: 12px 24px;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\n.button:hover {\n  opacity: 0.9;\n}\n\n// Button.tsx\nimport styles from './Button.module.css';\n\nconst Button: React.FC<ButtonProps> = ({ children, onClick }) => (\n  <button className={styles.button} onClick={onClick}>\n    {children}\n  </button>\n);"
              }
            ]
          }
        ]
      },
      {
        "type": "h2",
        "children": [
          {
            "text": "Tailwind CSS Integration"
          }
        ]
      },
      {
        "type": "p",
        "children": [
          {
            "text": "Tailwind CSS provides utility-first styling that works exceptionally well with React components:"
          }
        ]
      },
      {
        "type": "code_block",
        "language": "typescript",
        "children": [
          {
            "type": "code_line",
            "children": [
              {
                "text": "const Card: React.FC<CardProps> = ({ title, children, className = '' }) => (\n  <div className={`bg-white rounded-lg shadow-md p-6 ${className}`}>\n    {title && (\n      <h3 className=\"text-xl font-semibold mb-4 text-gray-800\">\n        {title}\n      </h3>\n    )}\n    <div className=\"text-gray-600\">\n      {children}\n    </div>\n  </div>\n);"
              }
            ]
          }
        ]
      },
      {
        "type": "h2",
        "children": [
          {
            "text": "Responsive Design Patterns"
          }
        ]
      },
      {
        "type": "p",
        "children": [
          {
            "text": "Create responsive layouts that work across all device sizes:"
          }
        ]
      },
      {
        "type": "code_block",
        "language": "typescript",
        "children": [
          {
            "type": "code_line",
            "children": [
              {
                "text": "const Grid: React.FC<GridProps> = ({ children }) => (\n  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n    {children}\n  </div>\n);\n\nconst Container: React.FC<ContainerProps> = ({ children }) => (\n  <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n    {children}\n  </div>\n);"
              }
            ]
          }
        ]
      }
    ],
    "discussions": [
      {
        "id": "discussion-7",
        "isResolved": false,
        "documentContent": "CSS-in-JS vs Traditional CSS",
        "authorEmail": "armin.arlert@codac.academy",
        "comments": [
          {
            "contentRich": [
              {
                "type": "p",
                "children": [
                  {
                    "text": "Love the comparison between different CSS approaches! This helps me understand when to use each one."
                  }
                ]
              }
            ],
            "authorEmail": "armin.arlert@codac.academy",
            "isEdited": false
          }
        ]
      },
      {
        "id": "discussion-8",
        "isResolved": false,
        "documentContent": "Tailwind CSS Integration",
        "authorEmail": "jean.kirstein@codac.academy",
        "comments": [
          {
            "contentRich": [
              {
                "type": "p",
                "children": [
                  {
                    "text": "The Tailwind examples are great! I've been wanting to learn Tailwind CSS and this gives me a good starting point."
                  }
                ]
              }
            ],
            "authorEmail": "jean.kirstein@codac.academy",
            "isEdited": false
          }
        ]
      }
    ]
  },
  {
    "title": "Performance Optimization in React",
    "description": "Techniques and strategies for optimizing React application performance",
    "documentType": "lesson_content",
    "authorEmail": "hange.zoe@codac.academy",
    "isPublished": true,
    "content": [
      {
        "type": "h1",
        "children": [
          {
            "text": "Performance Optimization in React"
          }
        ]
      },
      {
        "type": "p",
        "children": [
          {
            "text": "Performance is crucial for user experience. This guide covers the most effective techniques for optimizing React applications, from component-level optimizations to bundle size reduction."
          }
        ]
      },
      {
        "type": "h2",
        "children": [
          {
            "text": "Component Optimization"
          }
        ]
      },
      {
        "type": "h3",
        "children": [
          {
            "text": "React.memo"
          }
        ]
      },
      {
        "type": "p",
        "children": [
          {
            "text": "Use React.memo to prevent unnecessary re-renders:"
          }
        ]
      },
      {
        "type": "code_block",
        "language": "typescript",
        "children": [
          {
            "type": "code_line",
            "children": [
              {
                "text": "const ExpensiveComponent = React.memo<Props>(({ data, onUpdate }) => {\n  return (\n    <div>\n      {data.map(item => (\n        <Item key={item.id} data={item} onUpdate={onUpdate} />\n      ))}\n    </div>\n  );\n}, (prevProps, nextProps) => {\n  // Custom comparison function\n  return prevProps.data.length === nextProps.data.length &&\n         prevProps.onUpdate === nextProps.onUpdate;\n});"
              }
            ]
          }
        ]
      },
      {
        "type": "h3",
        "children": [
          {
            "text": "useMemo and useCallback"
          }
        ]
      },
      {
        "type": "p",
        "children": [
          {
            "text": "Optimize expensive calculations and function references:"
          }
        ]
      },
      {
        "type": "code_block",
        "language": "typescript",
        "children": [
          {
            "type": "code_line",
            "children": [
              {
                "text": "const DataProcessor: React.FC<Props> = ({ items, filter }) => {\n  // Memoize expensive calculation\n  const processedData = useMemo(() => {\n    return items\n      .filter(item => item.category === filter)\n      .sort((a, b) => a.name.localeCompare(b.name))\n      .map(item => ({\n        ...item,\n        processed: true\n      }));\n  }, [items, filter]);\n\n  // Memoize callback functions\n  const handleItemClick = useCallback((id: string) => {\n    console.log('Item clicked:', id);\n    // Handle click logic\n  }, []);\n\n  return (\n    <div>\n      {processedData.map(item => (\n        <Item \n          key={item.id} \n          data={item} \n          onClick={handleItemClick} \n        />\n      ))}\n    </div>\n  );\n};"
              }
            ]
          }
        ]
      },
      {
        "type": "h2",
        "children": [
          {
            "text": "Bundle Optimization"
          }
        ]
      },
      {
        "type": "h3",
        "children": [
          {
            "text": "Code Splitting"
          }
        ]
      },
      {
        "type": "code_block",
        "language": "typescript",
        "children": [
          {
            "type": "code_line",
            "children": [
              {
                "text": "import { lazy, Suspense } from 'react';\n\n// Lazy load components\nconst HeavyComponent = lazy(() => import('./HeavyComponent'));\nconst AdminPanel = lazy(() => import('./AdminPanel'));\n\nconst App: React.FC = () => {\n  const [showAdmin, setShowAdmin] = useState(false);\n\n  return (\n    <div>\n      <Suspense fallback={<div>Loading...</div>}>\n        <HeavyComponent />\n      </Suspense>\n      \n      {showAdmin && (\n        <Suspense fallback={<div>Loading admin panel...</div>}>\n          <AdminPanel />\n        </Suspense>\n      )}\n    </div>\n  );\n};"
              }
            ]
          }
        ]
      },
      {
        "type": "h3",
        "children": [
          {
            "text": "Dynamic Imports"
          }
        ]
      },
      {
        "type": "code_block",
        "language": "typescript",
        "children": [
          {
            "type": "code_line",
            "children": [
              {
                "text": "const loadChartLibrary = async () => {\n  const { Chart } = await import('chart.js');\n  return Chart;\n};\n\nconst ChartComponent: React.FC = () => {\n  const [Chart, setChart] = useState<any>(null);\n\n  useEffect(() => {\n    loadChartLibrary().then(setChart);\n  }, []);\n\n  if (!Chart) return <div>Loading chart...</div>;\n\n  // Render chart with loaded library\n  return <div>Chart component</div>;\n};"
              }
            ]
          }
        ]
      },
      {
        "type": "h2",
        "children": [
          {
            "text": "Performance Monitoring"
          }
        ]
      },
      {
        "type": "p",
        "children": [
          {
            "text": "Use React DevTools Profiler and browser performance tools to identify bottlenecks:"
          }
        ]
      },
      {
        "type": "ul",
        "children": [
          {
            "type": "li",
            "children": [
              {
                "text": "Profile component render times"
              }
            ]
          },
          {
            "type": "li",
            "children": [
              {
                "text": "Monitor bundle size with webpack-bundle-analyzer"
              }
            ]
          },
          {
            "type": "li",
            "children": [
              {
                "text": "Use Lighthouse for overall performance audits"
              }
            ]
          }
        ]
      }
    ],
    "discussions": [
      {
        "id": "discussion-9",
        "isResolved": false,
        "documentContent": "useMemo and useCallback",
        "authorEmail": "eren.yeager@codac.academy",
        "comments": [
          {
            "contentRich": [
              {
                "type": "p",
                "children": [
                  {
                    "text": "Excellent performance guide! The useMemo and useCallback examples are exactly what I needed to optimize my components."
                  }
                ]
              }
            ],
            "authorEmail": "eren.yeager@codac.academy",
            "isEdited": false
          }
        ]
      },
      {
        "id": "discussion-10",
        "isResolved": false,
        "documentContent": "Code Splitting",
        "authorEmail": "levi.ackerman@codac.academy",
        "comments": [
          {
            "contentRich": [
              {
                "type": "p",
                "children": [
                  {
                    "text": "The code splitting examples are very practical. I've been struggling with bundle size and this gives me concrete solutions."
                  }
                ]
              }
            ],
            "authorEmail": "levi.ackerman@codac.academy",
            "isEdited": false
          }
        ]
      }
    ]
  },
  {
    "title": "Advanced React Patterns and Hooks",
    "description": "Deep dive into advanced React patterns, custom hooks, and complex state management",
    "documentType": "lesson_content",
    "authorEmail": "eren.yeager@codac.academy",
    "isPublished": true,
    "content": [
      {
        "type": "h1",
        "children": [
          {
            "text": "Advanced React Patterns and Hooks"
          }
        ]
      },
      {
        "type": "p",
        "children": [
          {
            "text": "Master advanced React patterns that will make you a more effective developer. This guide covers complex patterns, custom hooks, and sophisticated state management techniques."
          }
        ]
      },
      {
        "type": "h2",
        "children": [
          {
            "text": "Custom Hooks Deep Dive"
          }
        ]
      },
      {
        "type": "p",
        "children": [
          {
            "text": "Custom hooks are the key to sharing stateful logic between components. Let's explore advanced patterns:"
          }
        ]
      },
      {
        "type": "code_block",
        "language": "typescript",
        "children": [
          {
            "type": "code_line",
            "children": [
              {
                "text": "// useLocalStorage hook\nfunction useLocalStorage<T>(key: string, initialValue: T) {\n  const [storedValue, setStoredValue] = useState<T>(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      console.error(error);\n      return initialValue;\n    }\n  });\n\n  const setValue = (value: T | ((val: T) => T)) => {\n    try {\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n      setStoredValue(valueToStore);\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return [storedValue, setValue] as const;\n}\n\n// Usage\nconst [name, setName] = useLocalStorage('userName', '');"
              }
            ]
          }
        ]
      },
      {
        "type": "h2",
        "children": [
          {
            "text": "Compound Components Pattern"
          }
        ]
      },
      {
        "type": "p",
        "children": [
          {
            "text": "Create flexible, composable components using the compound pattern:"
          }
        ]
      },
      {
        "type": "code_block",
        "language": "typescript",
        "children": [
          {
            "type": "code_line",
            "children": [
              {
                "text": "interface TabsContextType {\n  activeTab: string;\n  setActiveTab: (tab: string) => void;\n}\n\nconst TabsContext = createContext<TabsContextType | undefined>(undefined);\n\nconst Tabs: React.FC<{ children: React.ReactNode; defaultTab: string }> = ({ \n  children, \n  defaultTab \n}) => {\n  const [activeTab, setActiveTab] = useState(defaultTab);\n  \n  return (\n    <TabsContext.Provider value={{ activeTab, setActiveTab }}>\n      <div className=\"tabs\">{children}</div>\n    </TabsContext.Provider>\n  );\n};\n\nconst TabList: React.FC<{ children: React.ReactNode }> = ({ children }) => (\n  <div className=\"tab-list\">{children}</div>\n);\n\nconst Tab: React.FC<{ tabId: string; children: React.ReactNode }> = ({ \n  tabId, \n  children \n}) => {\n  const { activeTab, setActiveTab } = useContext(TabsContext)!;\n  \n  return (\n    <button\n      className={`tab ${activeTab === tabId ? 'active' : ''}`}\n      onClick={() => setActiveTab(tabId)}\n    >\n      {children}\n    </button>\n  );\n};\n\nconst TabPanels: React.FC<{ children: React.ReactNode }> = ({ children }) => (\n  <div className=\"tab-panels\">{children}</div>\n);\n\nconst TabPanel: React.FC<{ tabId: string; children: React.ReactNode }> = ({ \n  tabId, \n  children \n}) => {\n  const { activeTab } = useContext(TabsContext)!;\n  \n  return activeTab === tabId ? (\n    <div className=\"tab-panel\">{children}</div>\n  ) : null;\n};\n\n// Usage\n<Tabs defaultTab=\"tab1\">\n  <TabList>\n    <Tab tabId=\"tab1\">Tab 1</Tab>\n    <Tab tabId=\"tab2\">Tab 2</Tab>\n  </TabList>\n  <TabPanels>\n    <TabPanel tabId=\"tab1\">Content 1</TabPanel>\n    <TabPanel tabId=\"tab2\">Content 2</TabPanel>\n  </TabPanels>\n</Tabs>"
              }
            ]
          }
        ]
      }
    ],
    "discussions": [
      {
        "id": "discussion-11",
        "isResolved": false,
        "documentContent": "Custom Hooks Deep Dive",
        "authorEmail": "mikasa.ackerman@codac.academy",
        "comments": [
          {
            "contentRich": [
              {
                "type": "p",
                "children": [
                  {
                    "text": "This is exactly what I needed! The useLocalStorage hook example is perfect for my current project."
                  }
                ]
              }
            ],
            "userId": "mikasa.ackerman@codac.academy",
            "isEdited": false
          }
        ]
      }
    ]
  },
  {
    "title": "Next.js 14 App Router Mastery",
    "description": "Complete guide to Next.js 14 App Router, Server Components, and modern React patterns",
    "documentType": "lesson_content",
    "authorEmail": "eren.yeager@codac.academy",
    "isPublished": true,
    "content": [
      {
        "type": "h1",
        "children": [
          {
            "text": "Next.js 14 App Router Mastery"
          }
        ]
      },
      {
        "type": "p",
        "children": [
          {
            "text": "Next.js 14 introduces revolutionary changes with the App Router. Learn how to build modern, performant applications with Server Components, streaming, and the new routing system."
          }
        ]
      },
      {
        "type": "h2",
        "children": [
          {
            "text": "App Router Fundamentals"
          }
        ]
      },
      {
        "type": "p",
        "children": [
          {
            "text": "The App Router uses a file-system based routing system with new conventions:"
          }
        ]
      },
      {
        "type": "code_block",
        "language": "typescript",
        "children": [
          {
            "type": "code_line",
            "children": [
              {
                "text": "// app/layout.tsx - Root layout\nimport { Inter } from 'next/font/google';\n\nexport const metadata = {\n  title: 'My App',\n  description: 'Generated by Next.js',\n};\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <html lang=\"en\">\n      <body className={inter.className}>\n        <nav>Navigation</nav>\n        {children}\n        <footer>Footer</footer>\n      </body>\n    </html>\n  );\n}\n\n// app/page.tsx - Home page\nexport default function HomePage() {\n  return <h1>Welcome to Next.js 14!</h1>;\n}\n\n// app/about/page.tsx - About page\nexport default function AboutPage() {\n  return <h1>About Us</h1>;\n}"
              }
            ]
          }
        ]
      },
      {
        "type": "h2",
        "children": [
          {
            "text": "Server Components vs Client Components"
          }
        ]
      },
      {
        "type": "p",
        "children": [
          {
            "text": "Understanding when to use Server Components vs Client Components is crucial:"
          }
        ]
      },
      {
        "type": "code_block",
        "language": "typescript",
        "children": [
          {
            "type": "code_line",
            "children": [
              {
                "text": "// Server Component (default)\n// app/posts/page.tsx\nimport { getPosts } from '@/lib/posts';\n\nexport default async function PostsPage() {\n  const posts = await getPosts(); // Runs on server\n  \n  return (\n    <div>\n      <h1>Posts</h1>\n      {posts.map(post => (\n        <article key={post.id}>\n          <h2>{post.title}</h2>\n          <p>{post.excerpt}</p>\n        </article>\n      ))}\n    </div>\n  );\n}\n\n// Client Component\n'use client';\n\nimport { useState } from 'react';\n\nexport default function InteractiveComponent() {\n  const [count, setCount] = useState(0);\n  \n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>\n        Increment\n      </button>\n    </div>\n  );\n}"
              }
            ]
          }
        ]
      }
    ],
    "discussions": [
      {
        "id": "discussion-12",
        "isResolved": false,
        "documentContent": "App Router Fundamentals",
        "authorEmail": "armin.arlert@codac.academy",
        "comments": [
          {
            "contentRich": [
              {
                "type": "p",
                "children": [
                  {
                    "text": "Great explanation of the App Router! The file structure examples really help understand the new routing system."
                  }
                ]
              }
            ],
            "userId": "armin.arlert@codac.academy",
            "isEdited": false
          }
        ]
      }
    ]
  },
  {
    "title": "Building a Full-Stack React Application",
    "description": "Complete project walkthrough: building a modern full-stack application with React, Next.js, and Prisma",
    "documentType": "project_summary",
    "authorEmail": "eren.yeager@codac.academy",
    "isPublished": true,
    "content": [
      {
        "type": "h1",
        "children": [
          {
            "text": "Building a Full-Stack React Application"
          }
        ]
      },
      {
        "type": "p",
        "children": [
          {
            "text": "This comprehensive project walkthrough covers building a complete full-stack application from scratch. We'll use React, Next.js 14, Prisma, and modern development practices."
          }
        ]
      },
      {
        "type": "h2",
        "children": [
          {
            "text": "Project Overview"
          }
        ]
      },
      {
        "type": "p",
        "children": [
          {
            "text": "We'll build a task management application with the following features:"
          }
        ]
      },
      {
        "type": "ul",
        "children": [
          {
            "type": "li",
            "children": [
              {
                "text": "User authentication and authorization"
              }
            ]
          },
          {
            "type": "li",
            "children": [
              {
                "text": "Task creation, editing, and deletion"
              }
            ]
          },
          {
            "type": "li",
            "children": [
              {
                "text": "Real-time updates with WebSockets"
              }
            ]
          },
          {
            "type": "li",
            "children": [
              {
                "text": "File uploads and image processing"
              }
            ]
          },
          {
            "type": "li",
            "children": [
              {
                "text": "Responsive design with Tailwind CSS"
              }
            ]
          }
        ]
      },
      {
        "type": "h2",
        "children": [
          {
            "text": "Technology Stack"
          }
        ]
      },
      {
        "type": "code_block",
        "language": "json",
        "children": [
          {
            "type": "code_line",
            "children": [
              {
                "text": "{\n  \"frontend\": {\n    \"framework\": \"Next.js 14\",\n    \"ui\": \"React 18\",\n    \"styling\": \"Tailwind CSS\",\n    \"state\": \"Zustand\",\n    \"forms\": \"React Hook Form + Zod\"\n  },\n  \"backend\": {\n    \"database\": \"PostgreSQL\",\n    \"orm\": \"Prisma\",\n    \"auth\": \"NextAuth.js\",\n    \"api\": \"Next.js API Routes\",\n    \"realtime\": \"Pusher\"\n  },\n  \"deployment\": {\n    \"platform\": \"Vercel\",\n    \"database\": \"Supabase\",\n    \"storage\": \"Cloudinary\"\n  }\n}"
              }
            ]
          }
        ]
      },
      {
        "type": "h2",
        "children": [
          {
            "text": "Database Schema Design"
          }
        ]
      },
      {
        "type": "code_block",
        "language": "prisma",
        "children": [
          {
            "type": "code_line",
            "children": [
              {
                "text": "// schema.prisma\nmodel User {\n  id        String   @id @default(cuid())\n  email     String   @unique\n  name      String?\n  image     String?\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  \n  tasks     Task[]\n  projects  Project[]\n}\n\nmodel Project {\n  id          String   @id @default(cuid())\n  name        String\n  description String?\n  color       String   @default(\"#3B82F6\")\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @updatedAt\n  \n  userId    String\n  user      User     @relation(fields: [userId], references: [id])\n  tasks     Task[]\n}\n\nmodel Task {\n  id          String   @id @default(cuid())\n  title       String\n  description String?\n  completed   Boolean  @default(false)\n  priority    Priority @default(MEDIUM)\n  dueDate     DateTime?\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @updatedAt\n  \n  userId    String\n  user      User     @relation(fields: [userId], references: [id])\n  projectId String?\n  project   Project? @relation(fields: [projectId], references: [id])\n}\n\nenum Priority {\n  LOW\n  MEDIUM\n  HIGH\n  URGENT\n}"
              }
            ]
          }
        ]
      }
    ],
    "discussions": [
      {
        "id": "discussion-13",
        "isResolved": false,
        "documentContent": "Project Overview",
        "authorEmail": "levi.ackerman@codac.academy",
        "comments": [
          {
            "contentRich": [
              {
                "type": "p",
                "children": [
                  {
                    "text": "This is an excellent project structure! The technology stack choices are very modern and practical."
                  }
                ]
              }
            ],
            "userId": "levi.ackerman@codac.academy",
            "isEdited": false
          }
        ]
      }
    ]
  },
  {
    "title": "My Learning Journey: From Zero to React Expert",
    "description": "Personal reflections and lessons learned while mastering React development",
    "documentType": "community_post",
    "authorEmail": "eren.yeager@codac.academy",
    "isPublished": true,
    "content": [
      {
        "type": "h1",
        "children": [
          {
            "text": "My Learning Journey: From Zero to React Expert"
          }
        ]
      },
      {
        "type": "p",
        "children": [
          {
            "text": "Six months ago, I knew nothing about React. Today, I'm building complex applications and mentoring other developers. Here's my journey and the lessons I learned along the way."
          }
        ]
      },
      {
        "type": "h2",
        "children": [
          {
            "text": "The Beginning: Overwhelmed and Confused"
          }
        ]
      },
      {
        "type": "p",
        "children": [
          {
            "text": "When I first started learning React, I was completely overwhelmed. JSX looked like HTML mixed with JavaScript, and I couldn't understand why we needed all these concepts like components, props, and state."
          }
        ]
      },
      {
        "type": "p",
        "children": [
          {
            "text": "The turning point came when I stopped trying to understand everything at once and focused on building simple projects. My first React app was a todo list - nothing fancy, but it taught me the fundamentals."
          }
        ]
      },
      {
        "type": "h2",
        "children": [
          {
            "text": "Key Breakthrough Moments"
          }
        ]
      },
      {
        "type": "h3",
        "children": [
          {
            "text": "Understanding Component Lifecycle"
          }
        ]
      },
      {
        "type": "p",
        "children": [
          {
            "text": "Learning about useEffect and how components mount, update, and unmount was a game-changer. Suddenly, I could build interactive applications that responded to user actions."
          }
        ]
      },
      {
        "type": "h3",
        "children": [
          {
            "text": "State Management Patterns"
          }
        ]
      },
      {
        "type": "p",
        "children": [
          {
            "text": "Moving from useState to useContext, and eventually to more complex state management solutions, helped me understand how to structure larger applications."
          }
        ]
      },
      {
        "type": "h2",
        "children": [
          {
            "text": "Common Pitfalls and How to Avoid Them"
          }
        ]
      },
      {
        "type": "ul",
        "children": [
          {
            "type": "li",
            "children": [
              {
                "text": "Don't try to learn everything at once - focus on one concept at a time"
              }
            ]
          },
          {
            "type": "li",
            "children": [
              {
                "text": "Build projects, don't just read tutorials - hands-on experience is crucial"
              }
            ]
          },
          {
            "type": "li",
            "children": [
              {
                "text": "Join communities and ask questions - the React community is incredibly helpful"
              }
            ]
          },
          {
            "type": "li",
            "children": [
              {
                "text": "Read other people's code - GitHub is a goldmine of learning opportunities"
              }
            ]
          }
        ]
      },
      {
        "type": "h2",
        "children": [
          {
            "text": "Resources That Helped Me"
          }
        ]
      },
      {
        "type": "p",
        "children": [
          {
            "text": "Here are the resources that made the biggest difference in my learning:"
          }
        ]
      },
      {
        "type": "ol",
        "children": [
          {
            "type": "li",
            "children": [
              {
                "text": "React Official Documentation - Start here, it's actually really good"
              }
            ]
          },
          {
            "type": "li",
            "children": [
              {
                "text": "Kent C. Dodds' blog and courses - Excellent explanations of complex concepts"
              }
            ]
          },
          {
            "type": "li",
            "children": [
              {
                "text": "React DevTools - Essential for debugging and understanding component behavior"
              }
            ]
          },
          {
            "type": "li",
            "children": [
              {
                "text": "Building real projects - Nothing beats hands-on experience"
              }
            ]
          }
        ]
      }
    ],
    "discussions": [
      {
        "id": "discussion-14",
        "isResolved": false,
        "documentContent": "The Beginning: Overwhelmed and Confused",
        "authorEmail": "mikasa.ackerman@codac.academy",
        "comments": [
          {
            "contentRich": [
              {
                "type": "p",
                "children": [
                  {
                    "text": "This resonates so much with my own experience! I also started with a todo list and felt completely lost at first."
                  }
                ]
              }
            ],
            "userId": "mikasa.ackerman@codac.academy",
            "isEdited": false
          }
        ]
      }
    ]
  },
  {
    "title": "Advanced TypeScript Patterns for React",
    "description": "Master advanced TypeScript patterns and techniques specifically for React development",
    "documentType": "technical_documentation",
    "authorEmail": "eren.yeager@codac.academy",
    "isPublished": true,
    "content": [
      {
        "type": "h1",
        "children": [
          {
            "text": "Advanced TypeScript Patterns for React"
          }
        ]
      },
      {
        "type": "p",
        "children": [
          {
            "text": "TypeScript and React work beautifully together, but there are advanced patterns that can make your code more type-safe, maintainable, and developer-friendly. This guide covers the most powerful techniques."
          }
        ]
      },
      {
        "type": "h2",
        "children": [
          {
            "text": "Generic Components"
          }
        ]
      },
      {
        "type": "p",
        "children": [
          {
            "text": "Create reusable components that work with any data type:"
          }
        ]
      },
      {
        "type": "code_block",
        "language": "typescript",
        "children": [
          {
            "type": "code_line",
            "children": [
              {
                "text": "interface SelectProps<T> {\n  options: T[];\n  value: T;\n  onChange: (value: T) => void;\n  getLabel: (option: T) => string;\n  getValue: (option: T) => string;\n}\n\nfunction Select<T>({ \n  options, \n  value, \n  onChange, \n  getLabel, \n  getValue \n}: SelectProps<T>) {\n  return (\n    <select \n      value={getValue(value)} \n      onChange={(e) => {\n        const selectedOption = options.find(\n          option => getValue(option) === e.target.value\n        );\n        if (selectedOption) {\n          onChange(selectedOption);\n        }\n      }}\n    >\n      {options.map((option, index) => (\n        <option key={index} value={getValue(option)}>\n          {getLabel(option)}\n        </option>\n      ))}\n    </select>\n  );\n}\n\n// Usage with different types\ninterface User {\n  id: string;\n  name: string;\n}\n\nconst users: User[] = [\n  { id: '1', name: 'John' },\n  { id: '2', name: 'Jane' }\n];\n\n<Select\n  options={users}\n  value={users[0]}\n  onChange={(user) => console.log(user)}\n  getLabel={(user) => user.name}\n  getValue={(user) => user.id}\n/>"
              }
            ]
          }
        ]
      },
      {
        "type": "h2",
        "children": [
          {
            "text": "Discriminated Unions for State"
          }
        ]
      },
      {
        "type": "p",
        "children": [
          {
            "text": "Use discriminated unions to create type-safe state machines:"
          }
        ]
      },
      {
        "type": "code_block",
        "language": "typescript",
        "children": [
          {
            "type": "code_line",
            "children": [
              {
                "text": "type AsyncState<T> = \n  | { status: 'idle' }\n  | { status: 'loading' }\n  | { status: 'success'; data: T }\n  | { status: 'error'; error: string };\n\nfunction useAsyncData<T>(fetchFn: () => Promise<T>) {\n  const [state, setState] = useState<AsyncState<T>>({ status: 'idle' });\n\n  const execute = useCallback(async () => {\n    setState({ status: 'loading' });\n    try {\n      const data = await fetchFn();\n      setState({ status: 'success', data });\n    } catch (error) {\n      setState({ \n        status: 'error', \n        error: error instanceof Error ? error.message : 'Unknown error' \n      });\n    }\n  }, [fetchFn]);\n\n  return { state, execute };\n}\n\n// Usage with full type safety\nconst { state, execute } = useAsyncData(() => fetch('/api/users'));\n\n// TypeScript knows the exact shape of state based on status\nif (state.status === 'success') {\n  // state.data is fully typed\n  console.log(state.data);\n} else if (state.status === 'error') {\n  // state.error is available\n  console.error(state.error);\n}"
              }
            ]
          }
        ]
      }
    ],
    "discussions": [
      {
        "id": "discussion-15",
        "isResolved": false,
        "documentContent": "Generic Components",
        "authorEmail": "armin.arlert@codac.academy",
        "comments": [
          {
            "contentRich": [
              {
                "type": "p",
                "children": [
                  {
                    "text": "The generic Select component example is brilliant! This pattern will make my components much more reusable."
                  }
                ]
              }
            ],
            "userId": "armin.arlert@codac.academy",
            "isEdited": false
          }
        ]
      }
    ]
  },
  {
    "title": "React Testing Strategies and Best Practices",
    "description": "Comprehensive guide to testing React applications with modern tools and techniques",
    "documentType": "lesson_content",
    "authorEmail": "eren.yeager@codac.academy",
    "isPublished": true,
    "content": [
      {
        "type": "h1",
        "children": [
          {
            "text": "React Testing Strategies and Best Practices"
          }
        ]
      },
      {
        "type": "p",
        "children": [
          {
            "text": "Testing React applications can be challenging, but with the right strategies and tools, you can build confidence in your code. This guide covers everything from unit tests to integration testing."
          }
        ]
      },
      {
        "type": "h2",
        "children": [
          {
            "text": "Testing Philosophy"
          }
        ]
      },
      {
        "type": "p",
        "children": [
          {
            "text": "Before diving into specific testing techniques, it's important to understand the testing pyramid and when to use different types of tests:"
          }
        ]
      },
      {
        "type": "ul",
        "children": [
          {
            "type": "li",
            "children": [
              {
                "text": "Unit tests - Test individual functions and components in isolation"
              }
            ]
          },
          {
            "type": "li",
            "children": [
              {
                "text": "Integration tests - Test how components work together"
              }
            ]
          },
          {
            "type": "li",
            "children": [
              {
                "text": "End-to-end tests - Test complete user workflows"
              }
            ]
          }
        ]
      },
      {
        "type": "h2",
        "children": [
          {
            "text": "Testing React Components with React Testing Library"
          }
        ]
      },
      {
        "type": "p",
        "children": [
          {
            "text": "React Testing Library encourages testing components the way users interact with them:"
          }
        ]
      },
      {
        "type": "code_block",
        "language": "typescript",
        "children": [
          {
            "type": "code_line",
            "children": [
              {
                "text": "import { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { Button } from './Button';\n\ndescribe('Button Component', () => {\n  it('renders with correct text', () => {\n    render(<Button>Click me</Button>);\n    expect(screen.getByRole('button', { name: 'Click me' })).toBeInTheDocument();\n  });\n\n  it('calls onClick when clicked', async () => {\n    const handleClick = jest.fn();\n    const user = userEvent.setup();\n    \n    render(<Button onClick={handleClick}>Click me</Button>);\n    \n    await user.click(screen.getByRole('button'));\n    expect(handleClick).toHaveBeenCalledTimes(1);\n  });\n\n  it('is disabled when disabled prop is true', () => {\n    render(<Button disabled>Click me</Button>);\n    expect(screen.getByRole('button')).toBeDisabled();\n  });\n});"
              }
            ]
          }
        ]
      },
      {
        "type": "h2",
        "children": [
          {
            "text": "Testing Custom Hooks"
          }
        ]
      },
      {
        "type": "p",
        "children": [
          {
            "text": "Testing custom hooks requires a different approach using renderHook:"
          }
        ]
      },
      {
        "type": "code_block",
        "language": "typescript",
        "children": [
          {
            "type": "code_line",
            "children": [
              {
                "text": "import { renderHook, act } from '@testing-library/react';\nimport { useCounter } from './useCounter';\n\ndescribe('useCounter', () => {\n  it('should initialize with default value', () => {\n    const { result } = renderHook(() => useCounter());\n    expect(result.current.count).toBe(0);\n  });\n\n  it('should increment count', () => {\n    const { result } = renderHook(() => useCounter(0));\n    \n    act(() => {\n      result.current.increment();\n    });\n    \n    expect(result.current.count).toBe(1);\n  });\n\n  it('should decrement count', () => {\n    const { result } = renderHook(() => useCounter(1));\n    \n    act(() => {\n      result.current.decrement();\n    });\n    \n    expect(result.current.count).toBe(0);\n  });\n});"
              }
            ]
          }
        ]
      }
    ],
    "discussions": [
      {
        "id": "discussion-16",
        "isResolved": false,
        "documentContent": "Testing Philosophy",
        "authorEmail": "hange.zoe@codac.academy",
        "comments": [
          {
            "contentRich": [
              {
                "type": "p",
                "children": [
                  {
                    "text": "Great explanation of the testing pyramid! I've been struggling with when to use different types of tests, and this clarifies everything."
                  }
                ]
              }
            ],
            "userId": "hange.zoe@codac.academy",
            "isEdited": false
          }
        ]
      }
    ]
  },
  {
    "title": "My Development Setup and Workflow",
    "description": "Personal development environment, tools, and workflow that helps me stay productive",
    "documentType": "community_post",
    "authorEmail": "eren.yeager@codac.academy",
    "isPublished": true,
    "content": [
      {
        "type": "h1",
        "children": [
          {
            "text": "My Development Setup and Workflow"
          }
        ]
      },
      {
        "type": "p",
        "children": [
          {
            "text": "After months of experimenting with different tools and workflows, I've settled on a development setup that keeps me productive and focused. Here's what works for me."
          }
        ]
      },
      {
        "type": "h2",
        "children": [
          {
            "text": "Code Editor: VS Code with Extensions"
          }
        ]
      },
      {
        "type": "p",
        "children": [
          {
            "text": "VS Code is my go-to editor, and these extensions make it incredibly powerful:"
          }
        ]
      },
      {
        "type": "ul",
        "children": [
          {
            "type": "li",
            "children": [
              {
                "text": "ES7+ React/Redux/React-Native snippets - Essential for React development"
              }
            ]
          },
          {
            "type": "li",
            "children": [
              {
                "text": "TypeScript Importer - Automatically imports TypeScript modules"
              }
            ]
          },
          {
            "type": "li",
            "children": [
              {
                "text": "Prettier - Code formatting"
              }
            ]
          },
          {
            "type": "li",
            "children": [
              {
                "text": "ESLint - Code linting and error detection"
              }
            ]
          },
          {
            "type": "li",
            "children": [
              {
                "text": "Auto Rename Tag - Automatically renames paired HTML/JSX tags"
              }
            ]
          },
          {
            "type": "li",
            "children": [
              {
                "text": "Bracket Pair Colorizer - Makes nested code easier to read"
              }
            ]
          }
        ]
      },
      {
        "type": "h2",
        "children": [
          {
            "text": "Terminal and Shell"
          }
        ]
      },
      {
        "type": "p",
        "children": [
          {
            "text": "I use iTerm2 with Oh My Zsh for a powerful terminal experience:"
          }
        ]
      },
      {
        "type": "code_block",
        "language": "bash",
        "children": [
          {
            "type": "code_line",
            "children": [
              {
                "text": "# My favorite Oh My Zsh plugins\nplugins=(\n  git\n  node\n  npm\n  yarn\n  docker\n  vscode\n  zsh-autosuggestions\n  zsh-syntax-highlighting\n)\n\n# Custom aliases for productivity\nalias gs=\"git status\"\nalias ga=\"git add\"\nalias gc=\"git commit\"\nalias gp=\"git push\"\nalias dev=\"npm run dev\"\nalias build=\"npm run build\"\nalias test=\"npm test\""
              }
            ]
          }
        ]
      },
      {
        "type": "h2",
        "children": [
          {
            "text": "Browser DevTools Setup"
          }
        ]
      },
      {
        "type": "p",
        "children": [
          {
            "text": "Chrome DevTools with these extensions make debugging a breeze:"
          }
        ]
      },
      {
        "type": "ul",
        "children": [
          {
            "type": "li",
            "children": [
              {
                "text": "React Developer Tools - Essential for React development"
              }
            ]
          },
          {
            "type": "li",
            "children": [
              {
                "text": "Redux DevTools - For state management debugging"
              }
            ]
          },
          {
            "type": "li",
            "children": [
              {
                "text": "Lighthouse - Performance auditing"
              }
            ]
          }
        ]
      },
      {
        "type": "h2",
        "children": [
          {
            "text": "Project Structure and Organization"
          }
        ]
      },
      {
        "type": "p",
        "children": [
          {
            "text": "I follow a consistent project structure that scales well:"
          }
        ]
      },
      {
        "type": "code_block",
        "language": "text",
        "children": [
          {
            "type": "code_line",
            "children": [
              {
                "text": "src/\n├── components/          # Reusable components\n│   ├── ui/              # Basic UI components\n│   └── features/        # Feature-specific components\n├── pages/               # Next.js pages\n├── hooks/               # Custom hooks\n├── services/            # API services\n├── store/               # State management\n├── utils/               # Utility functions\n├── types/               # TypeScript types\n└── constants/           # App constants"
              }
            ]
          }
        ]
      }
    ],
    "discussions": [
      {
        "id": "discussion-17",
        "isResolved": false,
        "documentContent": "Code Editor: VS Code with Extensions",
        "authorEmail": "jean.kirstein@codac.academy",
        "comments": [
          {
            "contentRich": [
              {
                "type": "p",
                "children": [
                  {
                    "text": "Great extension recommendations! I'm definitely going to try the TypeScript Importer - that sounds incredibly useful."
                  }
                ]
              }
            ],
            "userId": "jean.kirstein@codac.academy",
            "isEdited": false
          }
        ]
      }
    ]
  }
]
